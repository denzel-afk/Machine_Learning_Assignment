{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12262572,"sourceType":"datasetVersion","datasetId":7727180},{"sourceId":12264293,"sourceType":"datasetVersion","datasetId":7728347}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# CircuitNet Congestion Prediction Project","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"### Machine Learning Final Project 2025\n\n**Name** : Denzel Elden Wijaya\n\n**Student ID** : 2402010607","metadata":{}},{"cell_type":"markdown","source":"---\n## Project Description\n\nIn this notebook, I will implement a **machine learning model to predict congestion** in chip layout using data from the **CircuitNet-N28 dataset**. This task is a part of the final project for the Machine Learning course.\n\nThe objective is to **predict routing congestion** based on features like macro region layout and estimated wire density (RUDY), using a CNN-based model (UNet).\n\n___\n\n## Dataset Used\n\nWe use the following extracted features and labels from the CircuitNet-N28 dataset:\n\n- **Features**:\n  - `macro_region`\n  - `RUDY`\n  - `RUDY_pin`\n\n- **Labels**:\n  - `congestion_GR_horizontal_overflow`\n  - `congestion_GR_vertical_overflow`\n\n---\n\n## Workflow Overview\n\n1. Dataset loading and prepocessing\n2. Load and test the pretrained model\n3. Train the model and visualize training loss\n4. Post-training quantization and Accuracy comparison\n5. Model structure improvement","metadata":{}},{"cell_type":"markdown","source":"## 1. Dataset Loading and Preprocessing\n\n\nThe dataset used in this project is a subset of the **CircuitNet-N28** benchmark, which is part of the open-source [CircuitNet](https://circuitnet.github.io/intro/intro.html) project for Machine Learning in EDA (Electronic Design Automation).\n\nThe original dataset was published in:\n\n- Chai, Z. et al., *CircuitNet: An Open-Source Dataset for Machine Learning in VLSI CAD Applications*, IEEE TCAD 2023. [[Link](https://ieeexplore.ieee.org/document/10158384)]\n\nWe only extracted the following files from the full dataset to reduce storage usage:\n- **Features:** `macro_region`, `RUDY`, and `RUDY_pin`\n- **Labels:** `congestion_GR_horizontal_overflow` and `congestion_GR_vertical_overflow`\n\nIn this section, we load the feature and label data from the extracted CircuitNet-N28 dataset folders, stack them into multi-channel tensors, and prepare them for training and evaluation.","metadata":{}},{"cell_type":"markdown","source":"### Dataset Loading and Test Sample","metadata":{}},{"cell_type":"code","source":"import os\nimport os.path as osp\nimport numpy as np\nimport torch\nfrom torch.utils.data import Dataset\nfrom torchvision.transforms import Compose\n\nclass CongestionDataset(Dataset):\n    def __init__(self, feature_dir, label_dir, pipeline=None):\n        \"\"\"\n        Args:\n            feature_dir (str): Directory with feature .npy files.\n            label_dir (str): Directory with label .npy files.\n            pipeline (callable, optional): Optional transforms to apply to data.\n        \"\"\"\n        self.feature_dir = feature_dir\n        self.label_dir = label_dir\n        self.sample_ids = [f.replace(\".npy\", \"\") for f in os.listdir(feature_dir) if f.endswith(\".npy\")]\n        self.pipeline = Compose(pipeline) if pipeline else None\n\n    def __len__(self):\n        return len(self.sample_ids)\n\n    def __getitem__(self, idx):\n        sample_id = self.sample_ids[idx]\n        feature = np.load(osp.join(self.feature_dir, f\"{sample_id}.npy\"))\n        label = np.load(osp.join(self.label_dir, f\"{sample_id}.npy\"))\n\n        sample = {'feature': feature, 'label': label}\n\n        if self.pipeline:\n            sample = self.pipeline(sample)\n\n        feature = torch.tensor(sample['feature'].transpose(2, 0, 1), dtype=torch.float32)\n        label = torch.tensor(sample['label'].transpose(2, 0, 1), dtype=torch.float32)\n\n        return feature, label\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T05:01:39.933088Z","iopub.execute_input":"2025-06-25T05:01:39.933372Z","iopub.status.idle":"2025-06-25T05:01:39.940897Z","shell.execute_reply.started":"2025-06-25T05:01:39.933353Z","shell.execute_reply":"2025-06-25T05:01:39.940183Z"}},"outputs":[],"execution_count":12},{"cell_type":"markdown","source":"## 2. Load and Test the Pretrained Model","metadata":{}},{"cell_type":"markdown","source":"In this section, we evaluate a pretrained model provided by the CircuitNet benchmark. The pretrained model was trained on the full dataset and serves as a performance reference for our own implementations.\n\nSteps performed in this part:\n\n1. Load the pretrained model weights (.pth) from the official source.\n2. Rebuild the model architecture (GDPNet / U-Net) to match the saved structure.\n3. Evaluate the model on our test data, using metrics such as:\n- Accuracy\n- SSIM (Structural Similarity)\n- NRMSE (Normalized RMSE)\n  \nThis helps us:\n- Understand how well the pretrained model performs\n- Set a baseline to compare with our own custom model (which we'll implement next)","metadata":{}},{"cell_type":"markdown","source":"Now, I am copying the 'models/gpdl.py' from the [Github](https://github.com/circuitnet/CircuitNet/blob/main/routability_ir_drop_prediction/models/gpdl.py). Then, I will try to load the pretrained weights into the model, and see ","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\n\ndef generation_init_weights(module):\n    def init_func(m):\n        classname = m.__class__.__name__\n        if hasattr(m, 'weight') and (classname.find('Conv') != -1 or classname.find('Linear') != -1):\n            if m.weight is not None:\n                nn.init.normal_(m.weight, 0.0, 0.02)\n            if hasattr(m, 'bias') and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n    module.apply(init_func)\n\n\nclass conv(nn.Module):\n    def __init__(self, dim_in, dim_out):\n        super().__init__()\n        self.main = nn.Sequential(\n            nn.Conv2d(dim_in, dim_out, 3, 1, 1),\n            nn.InstanceNorm2d(dim_out, affine=True),\n            nn.LeakyReLU(0.2, inplace=True),\n            nn.Conv2d(dim_out, dim_out, 3, 1, 1),\n            nn.InstanceNorm2d(dim_out, affine=True),\n            nn.LeakyReLU(0.2, inplace=True)\n        )\n\n    def forward(self, x):\n        return self.main(x)\n\n\nclass upconv(nn.Module):\n    def __init__(self, dim_in, dim_out):\n        super().__init__()\n        self.main = nn.Sequential(\n            nn.ConvTranspose2d(dim_in, dim_out, 4, 2, 1),\n            nn.InstanceNorm2d(dim_out, affine=True),\n            nn.LeakyReLU(0.2, inplace=True)\n        )\n\n    def forward(self, x):\n        return self.main(x)\n\n\nclass Encoder(nn.Module):\n    def __init__(self, in_dim=3, out_dim=32):\n        super().__init__()\n        self.c1 = conv(in_dim, 32)\n        self.pool1 = nn.MaxPool2d(2, 2)\n        self.c2 = conv(32, 64)\n        self.pool2 = nn.MaxPool2d(2, 2)\n        self.c3 = nn.Sequential(\n            nn.Conv2d(64, out_dim, 3, 1, 1),\n            nn.BatchNorm2d(out_dim),\n            nn.Tanh()\n        )\n\n    def forward(self, x):\n        h1 = self.c1(x)\n        h2 = self.pool1(h1)\n        h3 = self.c2(h2)\n        h4 = self.pool2(h3)\n        h5 = self.c3(h4)\n        return h5, h2\n\n\nclass Decoder(nn.Module):\n    def __init__(self, in_dim=32, out_dim=1):\n        super().__init__()\n        self.conv1 = conv(in_dim, 32)\n        self.upc1 = upconv(32, 16)\n        self.conv2 = conv(16, 16)\n        self.upc2 = upconv(16 + 32, 4)\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(4, out_dim, 3, 1, 1),\n            nn.Sigmoid()\n        )\n\n    def forward(self, x):\n        feature, skip = x\n        d1 = self.conv1(feature)\n        d2 = self.upc1(d1)\n        d3 = self.conv2(d2)\n        d4 = self.upc2(torch.cat([d3, skip], dim=1))\n        output = self.conv3(d4)\n        return output\n\n\nclass GPDL(nn.Module):\n    def __init__(self, in_channels=3, out_channels=1):\n        super().__init__()\n        self.encoder = Encoder(in_dim=in_channels)\n        self.decoder = Decoder(in_dim=32, out_dim=out_channels)\n\n    def forward(self, x):\n        x = self.encoder(x)\n        return self.decoder(x)\n\n    def init_weights(self, pretrained=None, strict=False):\n        if isinstance(pretrained, str):\n            state_dict = torch.load(pretrained, map_location=\"cpu\")[\"state_dict\"]\n            self.load_state_dict(state_dict, strict=strict)\n        elif pretrained is None:\n            generation_init_weights(self)\n        else:\n            raise TypeError(\"'pretrained' must be a str or None.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T05:01:47.336405Z","iopub.execute_input":"2025-06-25T05:01:47.336951Z","iopub.status.idle":"2025-06-25T05:01:47.349927Z","shell.execute_reply.started":"2025-06-25T05:01:47.336928Z","shell.execute_reply":"2025-06-25T05:01:47.349107Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"**Prepare the Model to be tested**","metadata":{}},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = GPDL(in_channels=3, out_channels=1).to(device)\nmodel.init_weights(pretrained=\"/kaggle/input/congestion-pretrained-weight/congestion.pth\")\nmodel.eval()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T03:51:43.799637Z","iopub.execute_input":"2025-06-25T03:51:43.799907Z","iopub.status.idle":"2025-06-25T03:51:44.159393Z","shell.execute_reply.started":"2025-06-25T03:51:43.799887Z","shell.execute_reply":"2025-06-25T03:51:44.158778Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"GPDL(\n  (encoder): Encoder(\n    (c1): conv(\n      (main): Sequential(\n        (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (2): LeakyReLU(negative_slope=0.2, inplace=True)\n        (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (4): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (5): LeakyReLU(negative_slope=0.2, inplace=True)\n      )\n    )\n    (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (c2): conv(\n      (main): Sequential(\n        (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (2): LeakyReLU(negative_slope=0.2, inplace=True)\n        (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (4): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (5): LeakyReLU(negative_slope=0.2, inplace=True)\n      )\n    )\n    (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n    (c3): Sequential(\n      (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): Tanh()\n    )\n  )\n  (decoder): Decoder(\n    (conv1): conv(\n      (main): Sequential(\n        (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (2): LeakyReLU(negative_slope=0.2, inplace=True)\n        (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (4): InstanceNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (5): LeakyReLU(negative_slope=0.2, inplace=True)\n      )\n    )\n    (upc1): upconv(\n      (main): Sequential(\n        (0): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n        (1): InstanceNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (2): LeakyReLU(negative_slope=0.2, inplace=True)\n      )\n    )\n    (conv2): conv(\n      (main): Sequential(\n        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (1): InstanceNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (2): LeakyReLU(negative_slope=0.2, inplace=True)\n        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n        (4): InstanceNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (5): LeakyReLU(negative_slope=0.2, inplace=True)\n      )\n    )\n    (upc2): upconv(\n      (main): Sequential(\n        (0): ConvTranspose2d(48, 4, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))\n        (1): InstanceNorm2d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)\n        (2): LeakyReLU(negative_slope=0.2, inplace=True)\n      )\n    )\n    (conv3): Sequential(\n      (0): Conv2d(4, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n      (1): Sigmoid()\n    )\n  )\n)"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"**Prepare the Dataset and DataLoader**","metadata":{}},{"cell_type":"markdown","source":"### Evaluation Metrics\n\nWe evaluate the model using two metrics:\n\n- **NRMSE (Normalized Root Mean Squared Error)**  \n  NRMSE measures the average prediction error, normalized by the value range of the ground truth. \n\\\\\\\\\\\\\\\\\\\n\\\n  A **lower NRMSE** means the predicted values are numerically close to the actual values.\n\n- **SSIM (Structural Similarity Index)**  \n  SSIM compares the **visual and structural similarity** between the predicted and true images, considering luminance, contrast, and structure.  \n  It ranges from **-1 to 1**, where:\n  - `1.0` = perfect structural match\n  - `0.0` = no similarity\n  - `< 0.0` = structurally inverse  \n  A **higher SSIM** means the predicted image preserves the structure and texture of the ground truth.\n\n> In summary:\n> - Use **NRMSE** to measure value accuracy.\n> - Use **SSIM** to measure how well the prediction preserves spatial patterns.","metadata":{}},{"cell_type":"code","source":"feature_dir = \"/kaggle/input/congestion-dataset/congestion/feature\"\nlabel_dir = \"/kaggle/input/congestion-dataset/congestion/label\"\n\ndataset = CongestionDataset(feature_dir, label_dir)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T03:52:37.238119Z","iopub.execute_input":"2025-06-25T03:52:37.238690Z","iopub.status.idle":"2025-06-25T03:52:37.671963Z","shell.execute_reply.started":"2025-06-25T03:52:37.238664Z","shell.execute_reply":"2025-06-25T03:52:37.671258Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"**Test the Model with Pretrained Weights**","metadata":{}},{"cell_type":"code","source":"from tqdm import tqdm\nfrom skimage.metrics import structural_similarity as ssim\n\nnrmse_list, ssim_list = [], []\n\nwith torch.no_grad():\n    for feature, label in tqdm(dataset):\n        feature = feature.unsqueeze(0).to(device)\n        pred = model(feature).cpu().squeeze(0).numpy()\n        gt = label.numpy()\n\n        pred_img = pred[0, :, :]\n        gt_img = gt[0, :, :]\n\n        mse = np.mean((pred_img - gt_img) ** 2)\n        nrmse = np.sqrt(mse) / (gt_img.max() - gt_img.min() + 1e-8)\n        ssim_val = ssim(pred_img, gt_img, data_range=gt_img.max() - gt_img.min())\n\n        nrmse_list.append(nrmse)\n        ssim_list.append(ssim_val)\n\nprint(f\"\\nAvg NRMSE: {np.mean(nrmse_list):.4f}\")\nprint(f\"Avg SSIM: {np.mean(ssim_list):.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T09:14:51.134564Z","iopub.execute_input":"2025-06-24T09:14:51.134782Z","iopub.status.idle":"2025-06-24T09:20:20.998847Z","shell.execute_reply.started":"2025-06-24T09:14:51.134765Z","shell.execute_reply":"2025-06-24T09:20:20.998192Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 10242/10242 [05:29<00:00, 31.05it/s]","output_type":"stream"},{"name":"stdout","text":"\nAvg NRMSE: 0.0418\nAvg SSIM: 0.7976\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"As you can see the result is very good on these half random datasets. While when I am running on the full datasets in another platform, it gives me these results:\n\n- Avg. NRMS: 0.0418\n- Avg. SSIM: 0.7976\n\nThese will be our borderline on the quality of our model in the third steps, we are aiming ro get as small NRMS and SSIM as possible.","metadata":{}},{"cell_type":"markdown","source":"## 3. Train the Model and Visualize Traning Loss","metadata":{}},{"cell_type":"markdown","source":"Now, let's define the model by ourselves, and do some tuning to find which one is the best model that can perform well in this project. Here, I am experimenting with some different learning rate and also with low epochs first, which is 3, we will see which hyperparameters will give us the highest metrics result. For a while, the models will only used the whole datasets for the training, just to checck which one is the best model to be used. After determining the best one, we will try to use 80% the data for training and 20% data for testing afterwards. ","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nimport pandas as pd\nfrom torch.utils.data import DataLoader\nfrom tqdm import tqdm\nimport random\nimport gc\nfrom skimage.metrics import structural_similarity as compare_ssim\nfrom skimage.metrics import normalized_root_mse\n\n# Set seed\ndef set_seed(seed=42):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n\nset_seed()\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nclass conv(nn.Module):\n    def __init__(self, dim_in, dim_out):\n        super().__init__()\n        self.main = nn.Sequential(\n            nn.Conv2d(dim_in, dim_out, 3, 1, 1),\n            nn.InstanceNorm2d(dim_out, affine=True),\n            nn.LeakyReLU(0.2, inplace=True),\n            nn.Conv2d(dim_out, dim_out, 3, 1, 1),\n            nn.InstanceNorm2d(dim_out, affine=True),\n            nn.LeakyReLU(0.2, inplace=True)\n        )\n\n    def forward(self, x):\n        return self.main(x)\n\nclass upconv(nn.Module):\n    def __init__(self, dim_in, dim_out):\n        super().__init__()\n        self.main = nn.Sequential(\n            nn.ConvTranspose2d(dim_in, dim_out, 4, 2, 1),\n            nn.InstanceNorm2d(dim_out, affine=True),\n            nn.LeakyReLU(0.2, inplace=True)\n        )\n\n    def forward(self, x):\n        return self.main(x)\n\nclass MyModel(nn.Module):\n    def __init__(self, in_channels=3, mid_dim=32, out_channels=1):\n        super().__init__()\n\n        self.enc1 = conv(in_channels, mid_dim)\n        self.pool1 = nn.MaxPool2d(2, 2)\n        self.enc2 = conv(mid_dim, mid_dim * 2)\n        self.pool2 = nn.MaxPool2d(2, 2)\n\n        self.bottleneck = nn.Sequential(\n            nn.Conv2d(mid_dim * 2, mid_dim * 4, 3, 1, 1),\n            nn.BatchNorm2d(mid_dim * 4),\n            nn.Tanh()\n        )\n\n        self.dec1 = upconv(mid_dim * 4, mid_dim * 2)\n        self.dec2 = upconv(mid_dim * 2 + mid_dim * 2, mid_dim)\n        self.final = nn.Sequential(\n            nn.Conv2d(mid_dim, out_channels, 3, 1, 1),\n            nn.Sigmoid()\n        )\n\n    def forward(self, x):\n        x1 = self.enc1(x)\n        x2 = self.pool1(x1)\n        x3 = self.enc2(x2)\n        x4 = self.pool2(x3)\n\n        bottleneck_out = self.bottleneck(x4)\n\n        d1 = self.dec1(bottleneck_out)\n        d1 = torch.cat([d1, x3], dim=1)\n\n        d2 = self.dec2(d1)\n        output = self.final(d2)\n        return output\n\nsearch_space = [\n    {\"mid_dim\": 32, \"lr\": 1e-3, \"batch_size\": 4},\n    {\"mid_dim\": 64, \"lr\": 1e-3, \"batch_size\": 4},\n    {\"mid_dim\": 32, \"lr\": 5e-4, \"batch_size\": 8},\n    {\"mid_dim\": 64, \"lr\": 5e-4, \"batch_size\": 8},\n]\n\nresults = []\n\nfor idx, config in enumerate(search_space):\n    print(f\"\\n===== Trial {idx+1} | mid_dim: {config['mid_dim']}, lr: {config['lr']}, batch_size: {config['batch_size']} =====\")\n\n    model = MyModel(in_channels=3, mid_dim=config['mid_dim'], out_channels=1).to(device)\n    optimizer = optim.AdamW(model.parameters(), lr=config['lr'], weight_decay=1e-4)\n    loss_fn = nn.MSELoss()\n\n    dataloader = DataLoader(dataset, batch_size=config[\"batch_size\"], shuffle=True)\n\n    model.train()\n    num_epochs = 3\n    for epoch in range(num_epochs):\n        epoch_loss = 0\n        progress_bar = tqdm(dataloader, desc=f\"Epoch {epoch+1}/{num_epochs}\", leave=False)\n        for feature, label in progress_bar:\n            feature, label = feature.to(device), label.to(device)\n            optimizer.zero_grad()\n            pred = model(feature)\n            loss = loss_fn(pred, label)\n            loss.backward()\n            optimizer.step()\n\n            epoch_loss += loss.item()\n            progress_bar.set_postfix(loss=loss.item())\n\n        print(f\"Epoch {epoch+1} Loss: {epoch_loss/len(dataloader):.4f}\")\n\n    model.eval()\n    total_nrmse = 0\n    total_ssim = 0\n    count = 0\n    with torch.no_grad():\n        for feature, label in dataloader:\n            feature, label = feature.to(device), label.to(device)\n            pred = model(feature)\n\n            for i in range(pred.shape[0]):\n                pred_np = pred[i].squeeze().cpu().numpy()\n                label_np = label[i].squeeze().cpu().numpy()\n\n                nrmse = normalized_root_mse(label_np, pred_np, normalization=\"min-max\")\n                ssim = compare_ssim(label_np, pred_np, data_range=1)\n\n                total_nrmse += nrmse\n                total_ssim += ssim\n                count += 1\n\n    avg_nrmse = total_nrmse / count\n    avg_ssim = total_ssim / count\n\n    print(f\"Trial {idx+1} - NRMSE: {avg_nrmse:.4f}, SSIM: {avg_ssim:.4f}\")\n\n    results.append({\n        \"trial\": idx+1,\n        \"mid_dim\": config[\"mid_dim\"],\n        \"lr\": config[\"lr\"],\n        \"batch_size\": config[\"batch_size\"],\n        \"nrmse\": avg_nrmse,\n        \"ssim\": avg_ssim\n    })\n\n    del model\n    torch.cuda.empty_cache()\n    gc.collect()\n\ndf = pd.DataFrame(results)\ndf.to_csv(\"trial_results.csv\", index=False)\nprint(\"\\nResults saved to trial_results.csv\")\nprint(df)\nS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T10:29:45.005393Z","iopub.execute_input":"2025-06-24T10:29:45.005955Z","iopub.status.idle":"2025-06-24T11:28:55.172023Z","shell.execute_reply.started":"2025-06-24T10:29:45.005932Z","shell.execute_reply":"2025-06-24T11:28:55.171393Z"}},"outputs":[{"name":"stdout","text":"\n===== Trial 1 | mid_dim: 32, lr: 0.001, batch_size: 4 =====\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 Loss: 0.0031\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 Loss: 0.0026\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 Loss: 0.0026\nTrial 1 - NRMSE: 0.0458, SSIM: 0.7865\n\n===== Trial 2 | mid_dim: 64, lr: 0.001, batch_size: 4 =====\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 Loss: 0.0030\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 Loss: 0.0026\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 Loss: 0.0026\nTrial 2 - NRMSE: 0.0464, SSIM: 0.7848\n\n===== Trial 3 | mid_dim: 32, lr: 0.0005, batch_size: 8 =====\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 Loss: 0.0040\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 Loss: 0.0026\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 Loss: 0.0025\nTrial 3 - NRMSE: 0.0458, SSIM: 0.7824\n\n===== Trial 4 | mid_dim: 64, lr: 0.0005, batch_size: 8 =====\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 Loss: 0.0031\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 Loss: 0.0026\n","output_type":"stream"},{"name":"stderr","text":"                                                                             \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 Loss: 0.0025\nTrial 4 - NRMSE: 0.0471, SSIM: 0.7762\n\nResults saved to trial_results.csv\n   trial  mid_dim      lr  batch_size     nrmse      ssim\n0      1       32  0.0010           4  0.045770  0.786521\n1      2       64  0.0010           4  0.046382  0.784825\n2      3       32  0.0005           8  0.045791  0.782401\n3      4       64  0.0005           8  0.047117  0.776214\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"From these trials, we can conclude that the model achieves the best performance when using mid_dim = 32 and batch_size = 4. Therefore, we will proceed to further train the model with these hyperparameters, allocating more time and increasing the number of training epochs to potentially improve the model's performance.\n\nAlong the training period, I notice some effects' of batch_size:\n1. When it is small, the update will be more frequent, then easy to escape from the local minima, and ahve a better generalization, but then the training period is very time-consuming, and will be quite noisy,a bd under-utilize GPU\n2. When it is large, the training will be faster, since the usage of GPU is maximal, and the training tends to more stable. But, then the tendency to stuck in the local minima is high.\n\nAdditionally, we will apply an 70/15/15 train-validation-test split to ensure proper evaluation, avoiding data leakage or redundancy during testing. This approach will help us obtain a more reliable estimate of the model's ability to predict congestion on unseen data.","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nfrom torch.utils.data import random_split, DataLoader\nfrom tqdm import tqdm\nimport copy\nimport matplotlib.pyplot as plt\nfrom skimage.metrics import structural_similarity as compare_ssim\nfrom skimage.metrics import normalized_root_mse\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\ndef train_with_early_stopping(dataset, mid_dim=32, batch_size=4, lr=1e-3, max_epochs=30, patience=5):\n    \n    total_len = len(dataset)\n    train_size = int(0.7 * total_len)\n    val_size = int(0.15 * total_len)\n    test_size = total_len - train_size - val_size\n\n    train_dataset, val_dataset, test_dataset = random_split(dataset, [train_size, val_size, test_size])\n\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=1, shuffle=False)\n    test_loader = DataLoader(test_dataset, batch_size=1, shuffle=False)\n\n    model = MyModel(in_channels=3, mid_dim=mid_dim, out_channels=1).to(device)\n    optimizer = optim.AdamW(model.parameters(), lr=lr, weight_decay=1e-4)\n    loss_fn = nn.MSELoss()\n\n    best_val_loss = float('inf')\n    best_model_wts = copy.deepcopy(model.state_dict())\n    patience_counter = 0\n\n    train_losses = []\n    val_losses = []\n\n    for epoch in range(max_epochs):\n        model.train()\n        epoch_loss = 0\n        for feature, label in tqdm(train_loader, desc=f\"Epoch {epoch+1}/{max_epochs}\", leave=False):\n            feature, label = feature.to(device), label.to(device)\n            optimizer.zero_grad()\n            pred = model(feature)\n            loss = loss_fn(pred, label)\n            loss.backward()\n            optimizer.step()\n            epoch_loss += loss.item()\n        \n        avg_train_loss = epoch_loss / max(len(train_loader), 1)\n        train_losses.append(avg_train_loss)\n\n        # === VALIDATION ===\n        model.eval()\n        val_loss = 0\n        with torch.no_grad():\n            for feature, label in val_loader:\n                feature, label = feature.to(device), label.to(device)\n                pred = model(feature)\n                loss = loss_fn(pred, label)\n                val_loss += loss.item()\n        avg_val_loss = val_loss / max(len(val_loader), 1)\n        val_losses.append(avg_val_loss)\n\n        print(f\"Epoch {epoch+1} - Train Loss: {avg_train_loss:.4f} | Val Loss: {avg_val_loss:.4f}\")\n\n        # EARLY STOPPING CHECK\n        if avg_val_loss < best_val_loss:\n            best_val_loss = avg_val_loss\n            best_model_wts = copy.deepcopy(model.state_dict())\n            patience_counter = 0\n        else:\n            patience_counter += 1\n            print(f\"--> No improvement, patience counter: {patience_counter}/{patience}\")\n            if patience_counter >= patience:\n                print(\"Early stopping triggered!\")\n                break\n\n    print(f\"Best Validation Loss: {best_val_loss:.4f}\")\n\n    # === FINAL TEST EVALUATION ===\n    model.load_state_dict(best_model_wts)\n    torch.save(model.state_dict(), \"best_model.pth\")\n    print(\"Best model saved as 'best_model.pth'\")\n\n    model.eval()\n    total_nrmse, total_ssim, count = 0, 0, 0\n\n    with torch.no_grad():\n        for feature, label in test_loader:\n            feature, label = feature.to(device), label.to(device)\n            pred = model(feature)\n\n            pred_np = pred.squeeze().cpu().numpy()\n            label_np = label.squeeze().cpu().numpy()\n\n            nrmse = normalized_root_mse(label_np, pred_np, normalization=\"min-max\")\n            ssim_val = compare_ssim(label_np, pred_np, data_range=1)\n\n            total_nrmse += nrmse\n            total_ssim += ssim_val\n            count += 1\n\n    print(f\"Final Test NRMSE: {total_nrmse/count:.4f} | Final Test SSIM: {total_ssim/count:.4f}\")\n\n    # === LOSS CURVE PLOTTING ===\n    plt.plot(train_losses, label=\"Train Loss\")\n    plt.plot(val_losses, label=\"Validation Loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Loss Curve\")\n    plt.legend()\n    plt.grid()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T14:27:03.610032Z","iopub.execute_input":"2025-06-24T14:27:03.610307Z","iopub.status.idle":"2025-06-24T14:27:03.623216Z","shell.execute_reply.started":"2025-06-24T14:27:03.610286Z","shell.execute_reply":"2025-06-24T14:27:03.622687Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"train_with_early_stopping(dataset, mid_dim=32, batch_size=4, lr=1e-3, max_epochs=50, patience=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T14:27:08.657058Z","iopub.execute_input":"2025-06-24T14:27:08.657723Z","iopub.status.idle":"2025-06-24T15:19:24.429368Z","shell.execute_reply.started":"2025-06-24T14:27:08.657701Z","shell.execute_reply":"2025-06-24T15:19:24.428645Z"}},"outputs":[{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 - Train Loss: 0.0032 | Val Loss: 0.0025\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 - Train Loss: 0.0026 | Val Loss: 0.0027\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 - Train Loss: 0.0026 | Val Loss: 0.0025\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 4 - Train Loss: 0.0026 | Val Loss: 0.0025\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 5 - Train Loss: 0.0026 | Val Loss: 0.0024\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 6 - Train Loss: 0.0025 | Val Loss: 0.0026\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 7 - Train Loss: 0.0025 | Val Loss: 0.0025\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 8 - Train Loss: 0.0025 | Val Loss: 0.0024\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 9 - Train Loss: 0.0025 | Val Loss: 0.0025\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 10 - Train Loss: 0.0025 | Val Loss: 0.0024\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 11 - Train Loss: 0.0025 | Val Loss: 0.0024\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 12 - Train Loss: 0.0024 | Val Loss: 0.0025\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 13 - Train Loss: 0.0024 | Val Loss: 0.0023\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 14 - Train Loss: 0.0024 | Val Loss: 0.0023\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 15 - Train Loss: 0.0024 | Val Loss: 0.0024\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 16 - Train Loss: 0.0024 | Val Loss: 0.0024\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 17 - Train Loss: 0.0024 | Val Loss: 0.0023\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 18 - Train Loss: 0.0024 | Val Loss: 0.0024\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 19 - Train Loss: 0.0023 | Val Loss: 0.0025\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 20 - Train Loss: 0.0023 | Val Loss: 0.0023\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 21 - Train Loss: 0.0023 | Val Loss: 0.0024\n--> No improvement, patience counter: 4/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 22 - Train Loss: 0.0023 | Val Loss: 0.0022\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 23 - Train Loss: 0.0023 | Val Loss: 0.0023\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 24 - Train Loss: 0.0023 | Val Loss: 0.0022\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 25 - Train Loss: 0.0023 | Val Loss: 0.0022\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 26 - Train Loss: 0.0022 | Val Loss: 0.0023\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 27 - Train Loss: 0.0022 | Val Loss: 0.0023\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 28 - Train Loss: 0.0022 | Val Loss: 0.0023\n--> No improvement, patience counter: 4/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 29 - Train Loss: 0.0022 | Val Loss: 0.0022\n--> No improvement, patience counter: 5/5\nEarly stopping triggered!\nBest Validation Loss: 0.0022\nBest model saved as 'best_model.pth'\nFinal Test NRMSE: 0.0425 | Final Test SSIM: 0.7981\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"After a sequence of trianing, we got a better Final Test SSIM, with less NRMSE also, eventhough the result is not much difference with the pretrained weight, but at least it gave us a better result. based on the trianing that we ahve done, epochs = 30 is actually enough for this kind of problems, since as you can see the improvement is also not significant from 30 above. Now, let's edit some architecture of the model, and we will find out whether adding convolutional layer will help to increase the acccuracy on the metrics","metadata":{}},{"cell_type":"code","source":"class ImprovedModel(nn.Module):\n    def __init__(self, in_channels=3, mid_dim=48, out_channels=1):\n        super().__init__()\n\n        self.enc1 = conv(in_channels, mid_dim)\n        self.enc1_extra = conv(mid_dim, mid_dim)\n        self.pool1 = nn.MaxPool2d(2, 2)\n\n        self.enc2 = conv(mid_dim, mid_dim * 2)\n        self.enc2_extra = conv(mid_dim * 2, mid_dim * 2)\n        self.pool2 = nn.MaxPool2d(2, 2)\n\n        self.bottleneck = nn.Sequential(\n            nn.Conv2d(mid_dim * 2, mid_dim * 4, 3, 1, 1),\n            nn.BatchNorm2d(mid_dim * 4),\n            nn.SiLU(inplace=True),\n            nn.Conv2d(mid_dim * 4, mid_dim * 4, 3, 1, 1),  # Extra conv layer\n            nn.BatchNorm2d(mid_dim * 4),\n            nn.SiLU(inplace=True)\n        )\n\n        self.dec1 = upconv(mid_dim * 4, mid_dim * 2)\n        self.dec2 = upconv(mid_dim * 2 + mid_dim * 2, mid_dim)\n        self.dec2_extra = conv(mid_dim, mid_dim)\n        self.final = nn.Sequential(\n            nn.Conv2d(mid_dim, out_channels, 3, 1, 1),\n            nn.Sigmoid()\n        )\n\n    def forward(self, x):\n        x1 = self.enc1(x)\n        x1 = self.enc1_extra(x1)\n        x2 = self.pool1(x1)\n\n        x3 = self.enc2(x2)\n        x3 = self.enc2_extra(x3)\n        x4 = self.pool2(x3)\n\n        bottleneck_out = self.bottleneck(x4)\n\n        d1 = self.dec1(bottleneck_out)\n        d1 = torch.cat([d1, x3], dim=1)\n\n        d2 = self.dec2(d1)\n        d2 = self.dec2_extra(d2)\n        output = self.final(d2)\n        return output","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T15:31:19.140490Z","iopub.execute_input":"2025-06-24T15:31:19.141037Z","iopub.status.idle":"2025-06-24T15:31:19.148315Z","shell.execute_reply.started":"2025-06-24T15:31:19.141013Z","shell.execute_reply":"2025-06-24T15:31:19.147694Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Subset, DataLoader\nimport matplotlib.pyplot as plt\nfrom skimage.metrics import normalized_root_mse\n\n# Split Dataset\nall_indices = list(range(len(dataset)))\ntrain_idx, val_idx = train_test_split(all_indices, test_size=0.2, random_state=42)\n\ntrain_subset = Subset(dataset, train_idx)\nval_subset = Subset(dataset, val_idx)\n\ntrain_loader = DataLoader(train_subset, batch_size=4, shuffle=True)\nval_loader = DataLoader(val_subset, batch_size=4, shuffle=False)\n\n# Model Setup\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = ImprovedModel().to(device)\noptimizer = optim.AdamW(model.parameters(), lr=1e-3, weight_decay=1e-4)\nloss_fn = nn.MSELoss()\n\n# Training Config\nbest_val_loss = float(\"inf\")\npatience = 5\npatience_counter = 0\nepochs = 30\n\ntrain_losses = []\nval_losses = []\n\n# Training Loop\nfor epoch in range(1, epochs + 1):\n    model.train()\n    train_loss = 0\n    for feature, label in train_loader:\n        feature, label = feature.to(device), label.to(device)\n        optimizer.zero_grad()\n        pred = model(feature)\n        loss = loss_fn(pred, label)\n        loss.backward()\n        optimizer.step()\n        train_loss += loss.item()\n    train_loss /= len(train_loader)\n    train_losses.append(train_loss)\n\n    # Validation\n    model.eval()\n    val_loss = 0\n    with torch.no_grad():\n        for feature, label in val_loader:\n            feature, label = feature.to(device), label.to(device)\n            pred = model(feature)\n            loss = loss_fn(pred, label)\n            val_loss += loss.item()\n    val_loss /= len(val_loader)\n    val_losses.append(val_loss)\n\n    print(f\"Epoch {epoch} | Train Loss: {train_loss:.4f} | Val Loss: {val_loss:.4f}\")\n\n    # Early Stopping\n    if val_loss < best_val_loss:\n        best_val_loss = val_loss\n        torch.save(model.state_dict(), \"best_improved_model.pth\")\n        print(f\"✅ New Best Model Saved at Epoch {epoch} with Val Loss: {val_loss:.4f}\")\n        patience_counter = 0\n    else:\n        patience_counter += 1\n        if patience_counter >= patience:\n            print(f\"⏹️ Early Stopping triggered after {epoch} epochs\")\n            break\n\n# Plot Loss Curve\nplt.figure(figsize=(8, 6))\nplt.plot(train_losses, label=\"Train Loss\")\nplt.plot(val_losses, label=\"Val Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.title(\"Loss Curve\")\nplt.legend()\nplt.grid()\nplt.show()\n\n# Final NRMSE on Validation Set\nmodel.load_state_dict(torch.load(\"best_improved_model.pth\"))\nmodel.eval()\n\nnrmse_list = []\nwith torch.no_grad():\n    for feature, label in val_loader:\n        feature, label = feature.to(device), label.to(device)\n        pred = model(feature).squeeze().cpu().numpy()\n        label = label.squeeze().cpu().numpy()\n\n        nrmse_val = normalized_root_mse(label, pred, normalization=\"min-max\")\n        nrmse_list.append(nrmse_val)\n\nprint(f\"\\nFinal NRMSE on Validation Set: {np.mean(nrmse_list):.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T15:31:19.425656Z","iopub.execute_input":"2025-06-24T15:31:19.426303Z","iopub.status.idle":"2025-06-24T16:40:06.748940Z","shell.execute_reply.started":"2025-06-24T15:31:19.426282Z","shell.execute_reply":"2025-06-24T16:40:06.748209Z"}},"outputs":[{"name":"stdout","text":"Epoch 1 | Train Loss: 0.0029 | Val Loss: 0.0026\n✅ New Best Model Saved at Epoch 1 with Val Loss: 0.0026\nEpoch 2 | Train Loss: 0.0027 | Val Loss: 0.0027\nEpoch 3 | Train Loss: 0.0026 | Val Loss: 0.0026\n✅ New Best Model Saved at Epoch 3 with Val Loss: 0.0026\nEpoch 4 | Train Loss: 0.0026 | Val Loss: 0.0027\nEpoch 5 | Train Loss: 0.0025 | Val Loss: 0.0025\n✅ New Best Model Saved at Epoch 5 with Val Loss: 0.0025\nEpoch 6 | Train Loss: 0.0025 | Val Loss: 0.0025\nEpoch 7 | Train Loss: 0.0025 | Val Loss: 0.0026\nEpoch 8 | Train Loss: 0.0025 | Val Loss: 0.0029\nEpoch 9 | Train Loss: 0.0025 | Val Loss: 0.0027\nEpoch 10 | Train Loss: 0.0025 | Val Loss: 0.0025\n⏹️ Early Stopping triggered after 10 epochs\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nFinal NRMSE on Validation Set: 0.0490\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"Turns out this model is not improved, means the previous one is the best that we can do. Hence that model will be used for the quantization on the next step.","metadata":{}},{"cell_type":"markdown","source":"## 4. Post-Training Quantization and Accuracy Comparison","metadata":{}},{"cell_type":"markdown","source":"To improve inference efficiency and reduce model size, we applied post-training quntization to the best-performing model.\n\nQuantization reduces the model's memory footprint by converting high-precision weights (e.g., 32-bit floating point) into lower precision formats such as INT8. This technique is commonly used in real-world deployment scenarios to:\n\n1. Decrease model size\n2. Accelerate inference time\n3. Reduce memory consumption\n\nIn this project, dynamic quantization is applied after training, which is suitable for models containing mainly convolutional and linear layers.\n\nWe used PyTorch's dynamic quantization approach targeting nn.Linear layers. The steps are:\n\n1. Load the best-trained model\n2. Apply dynamic quantization\n3. Save the quantized model\n4. Compare model sizes\n5. Re-evaluate performance (NRMSE & SSIM)","metadata":{}},{"cell_type":"code","source":"import torch\nimport os\nimport numpy as np\nfrom skimage.metrics import structural_similarity as compare_ssim\nfrom skimage.metrics import normalized_root_mse\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# === Load Dataset Test Set ===\ntest_loader = DataLoader(dataset, batch_size=1, shuffle=False)\n\n# === Size Check Function ===\ndef check_size(path):\n    size = os.path.getsize(path) / (1024 * 1024)\n    return f\"{size:.2f} MB\"\n\n# === Load Trained Model ===\nmodel_fp32 = MyModel(in_channels=3, mid_dim=32, out_channels=1).to(device)\nmodel_fp32.load_state_dict(torch.load(\"best_model.pth\", map_location=device))\nmodel_fp32.eval()\n\n# === Save FP32 Size ===\ntorch.save(model_fp32.state_dict(), \"model_fp32.pth\")\nprint(f\"FP32 Model size: {check_size('model_fp32.pth')}\")\n\n# === Dynamic Quantization (applies to Linear layers only, good for size reduction) ===\nquantized_model = torch.quantization.quantize_dynamic(\n    model_fp32, {torch.nn.Linear}, dtype=torch.qint8\n)\n\n# === Save Quantized Model ===\ntorch.save(quantized_model.state_dict(), \"model_quantized.pth\")\nprint(f\"Quantized Model size: {check_size('model_quantized.pth')}\")\n\n# === Evaluate Quantized Model ===\nquantized_model.to(device)\nquantized_model.eval()\n\ntotal_nrmse, total_ssim, count = 0, 0, 0\n\nwith torch.no_grad():\n    for feature, label in test_loader:\n        feature, label = feature.to(device), label.to(device)\n        pred = quantized_model(feature)\n\n        pred_np = pred.squeeze().cpu().numpy()\n        label_np = label.squeeze().cpu().numpy()\n\n        nrmse = normalized_root_mse(label_np, pred_np, normalization=\"min-max\")\n        ssim_val = compare_ssim(label_np, pred_np, data_range=1)\n\n        total_nrmse += nrmse\n        total_ssim += ssim_val\n        count += 1\n\nprint(f\"Quantized Model - Test NRMSE: {total_nrmse/count:.4f} | SSIM: {total_ssim/count:.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-24T18:16:11.157100Z","iopub.execute_input":"2025-06-24T18:16:11.157747Z","iopub.status.idle":"2025-06-24T18:18:59.591480Z","shell.execute_reply.started":"2025-06-24T18:16:11.157723Z","shell.execute_reply":"2025-06-24T18:18:59.590814Z"}},"outputs":[{"name":"stdout","text":"FP32 Model size: 1.30 MB\nQuantized Model size: 1.30 MB\nQuantized Model - Test NRMSE: 0.0428 | SSIM: 0.7927\n","output_type":"stream"}],"execution_count":28},{"cell_type":"markdown","source":"In an effort to reduce the model size for deployment, we attempted to apply PyTorch's quantization techniques to the trained model. However, the current model architecture utilizes ConvTranspose2d layers in the decoder module.\n\nUnfortunately, as per PyTorch's official documentation, ConvTranspose2d layers are not yet supported for quantization, especially with per-channel weight observers commonly used during static or dynamic quantization.\n\nConsequently, quantization cannot be applied to the current model without significant architectural modifications. One potential solution would be to replace transposed convolution operations with alternative upsampling techniques (e.g., bilinear or nearest-neighbor interpolation) followed by standard Conv2d layers, which are compatible with quantization workflows.\n\nFor this project, we chose to retain the current architecture to preserve performance, acknowledging that full quantization is not feasible under these conditions.","metadata":{}},{"cell_type":"markdown","source":"## 5. Model Structure Improvement","metadata":{"execution":{"iopub.status.busy":"2025-06-24T18:26:01.437751Z","iopub.execute_input":"2025-06-24T18:26:01.438411Z","iopub.status.idle":"2025-06-24T18:26:01.441393Z","shell.execute_reply.started":"2025-06-24T18:26:01.438389Z","shell.execute_reply":"2025-06-24T18:26:01.440728Z"}}},{"cell_type":"markdown","source":"From the resource that is given, let's implement SEBlock into our model.\n\nSENet introduces a lightweight module called the SE Block, designed to improve the representational power of a CNN by explicitly modeling the importance of each channel in the feature map.\n\nIn simple terms:\n1. After convolutional layers produce feature maps with many channels, not all channels are equally useful.\n\n2. The SE Block learns which channels are important and emphasizes them.\n\n3. It suppresses irrelevant or noisy channels.\n\n4. This boosts the model's ability to focus on meaningful features with minimal computational overhead.","metadata":{}},{"cell_type":"markdown","source":"Let's define The SE Block to be implemented into the model that we have tuned its hyperparameters.","metadata":{}},{"cell_type":"code","source":"class SEBlock(nn.Module):\n    def __init__(self, channel, reduction=16):\n        super().__init__()\n        self.pool = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Sequential(\n            nn.Linear(channel, channel // reduction, bias=False),\n            nn.ReLU(inplace=True),\n            nn.Linear(channel // reduction, channel, bias=False),\n            nn.Sigmoid()\n        )\n\n    def forward(self, x):\n        b, c, _, _ = x.size()\n        y = self.pool(x).view(b, c)\n        y = self.fc(y).view(b, c, 1, 1)\n        return x * y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T05:01:58.566892Z","iopub.execute_input":"2025-06-25T05:01:58.567230Z","iopub.status.idle":"2025-06-25T05:01:58.572341Z","shell.execute_reply.started":"2025-06-25T05:01:58.567189Z","shell.execute_reply":"2025-06-25T05:01:58.571664Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"class OptimizedModel(nn.Module):\n    def __init__(self, in_channels=3, mid_dim=32, out_channels=1):\n        super().__init__()\n\n        self.enc1 = conv(in_channels, mid_dim)\n        self.se1 = SEBlock(mid_dim)\n        self.pool1 = nn.MaxPool2d(2, 2)\n\n        self.enc2 = conv(mid_dim, mid_dim * 2)\n        self.se2 = SEBlock(mid_dim * 2)\n        self.pool2 = nn.MaxPool2d(2, 2)\n\n        self.bottleneck = nn.Sequential(\n            nn.Conv2d(mid_dim * 2, mid_dim * 4, 3, 1, 1),\n            nn.BatchNorm2d(mid_dim * 4),\n            nn.Tanh()\n        )\n\n        self.dec1 = upconv(mid_dim * 4, mid_dim * 2)\n        self.dec2 = upconv(mid_dim * 2 + mid_dim * 2, mid_dim)\n        self.final = nn.Sequential(\n            nn.Conv2d(mid_dim, out_channels, 3, 1, 1),\n            nn.Sigmoid()\n        )\n\n    def forward(self, x):\n        x1 = self.enc1(x)\n        x1 = self.se1(x1)\n        x2 = self.pool1(x1)\n\n        x3 = self.enc2(x2)\n        x3 = self.se2(x3)\n        x4 = self.pool2(x3)\n\n        bottleneck_out = self.bottleneck(x4)\n\n        d1 = self.dec1(bottleneck_out)\n        d1 = torch.cat([d1, x3], dim=1)\n\n        d2 = self.dec2(d1)\n        output = self.final(d2)\n        return output\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T05:01:58.934959Z","iopub.execute_input":"2025-06-25T05:01:58.935168Z","iopub.status.idle":"2025-06-25T05:01:58.941919Z","shell.execute_reply.started":"2025-06-25T05:01:58.935152Z","shell.execute_reply":"2025-06-25T05:01:58.941211Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport numpy as np\nfrom torch.utils.data import random_split, DataLoader\nfrom tqdm import tqdm\nimport copy\nimport matplotlib.pyplot as plt\nfrom skimage.metrics import structural_similarity as compare_ssim\nfrom skimage.metrics import normalized_root_mse\n\ndef train_with_early_stopping(dataset, mid_dim=32, batch_size=4, lr=1e-3, max_epochs=30, patience=5):\n    \n    total_len = len(dataset)\n    train_size = int(0.7 * total_len)\n    val_size = int(0.15 * total_len)\n    test_size = total_len - train_size - val_size\n\n    train_dataset, val_dataset, test_dataset = random_split(dataset, [train_size, val_size, test_size])\n\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n    val_loader = DataLoader(val_dataset, batch_size=1, shuffle=False)\n    test_loader = DataLoader(test_dataset, batch_size=1, shuffle=False)\n\n    model = OptimizedModel(in_channels=3, mid_dim=mid_dim, out_channels=1).to(device)\n    optimizer = optim.AdamW(model.parameters(), lr=lr, weight_decay=1e-4)\n    loss_fn = nn.MSELoss()\n\n    best_val_loss = float('inf')\n    best_model_wts = copy.deepcopy(model.state_dict())\n    patience_counter = 0\n\n    train_losses = []\n    val_losses = []\n\n    for epoch in range(max_epochs):\n        model.train()\n        epoch_loss = 0\n        for feature, label in tqdm(train_loader, desc=f\"Epoch {epoch+1}/{max_epochs}\", leave=False):\n            feature, label = feature.to(device), label.to(device)\n            optimizer.zero_grad()\n            pred = model(feature)\n            loss = loss_fn(pred, label)\n            loss.backward()\n            optimizer.step()\n            epoch_loss += loss.item()\n        \n        avg_train_loss = epoch_loss / max(len(train_loader), 1)\n        train_losses.append(avg_train_loss)\n\n        # === VALIDATION ===\n        model.eval()\n        val_loss = 0\n        with torch.no_grad():\n            for feature, label in val_loader:\n                feature, label = feature.to(device), label.to(device)\n                pred = model(feature)\n                loss = loss_fn(pred, label)\n                val_loss += loss.item()\n        avg_val_loss = val_loss / max(len(val_loader), 1)\n        val_losses.append(avg_val_loss)\n\n        print(f\"Epoch {epoch+1} - Train Loss: {avg_train_loss:.4f} | Val Loss: {avg_val_loss:.4f}\")\n\n        # EARLY STOPPING CHECK\n        if avg_val_loss < best_val_loss:\n            best_val_loss = avg_val_loss\n            best_model_wts = copy.deepcopy(model.state_dict())\n            patience_counter = 0\n        else:\n            patience_counter += 1\n            print(f\"--> No improvement, patience counter: {patience_counter}/{patience}\")\n            if patience_counter >= patience:\n                print(\"Early stopping triggered!\")\n                break\n\n    print(f\"Best Validation Loss: {best_val_loss:.4f}\")\n\n    # === FINAL TEST EVALUATION ===\n    model.load_state_dict(best_model_wts)\n    torch.save(model.state_dict(), \"best_model.pth\")\n    print(\"Best model saved as 'best_model.pth'\")\n\n    model.eval()\n    total_nrmse, total_ssim, count = 0, 0, 0\n\n    with torch.no_grad():\n        for feature, label in test_loader:\n            feature, label = feature.to(device), label.to(device)\n            pred = model(feature)\n\n            pred_np = pred.squeeze().cpu().numpy()\n            label_np = label.squeeze().cpu().numpy()\n\n            nrmse = normalized_root_mse(label_np, pred_np, normalization=\"min-max\")\n            ssim_val = compare_ssim(label_np, pred_np, data_range=1)\n\n            total_nrmse += nrmse\n            total_ssim += ssim_val\n            count += 1\n\n    print(f\"Final Test NRMSE: {total_nrmse/count:.4f} | Final Test SSIM: {total_ssim/count:.4f}\")\n\n    # === LOSS CURVE PLOTTING ===\n    plt.plot(train_losses, label=\"Train Loss\")\n    plt.plot(val_losses, label=\"Validation Loss\")\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Loss\")\n    plt.title(\"Loss Curve\")\n    plt.legend()\n    plt.grid()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T05:01:59.295092Z","iopub.execute_input":"2025-06-25T05:01:59.295295Z","iopub.status.idle":"2025-06-25T05:01:59.307950Z","shell.execute_reply.started":"2025-06-25T05:01:59.295280Z","shell.execute_reply":"2025-06-25T05:01:59.307152Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"train_with_early_stopping(dataset, mid_dim=32, batch_size=4, lr=1e-3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-25T05:01:59.648474Z","iopub.execute_input":"2025-06-25T05:01:59.648977Z","iopub.status.idle":"2025-06-25T06:06:23.056709Z","shell.execute_reply.started":"2025-06-25T05:01:59.648951Z","shell.execute_reply":"2025-06-25T06:06:23.056113Z"}},"outputs":[{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 - Train Loss: 0.0033 | Val Loss: 0.0029\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 - Train Loss: 0.0026 | Val Loss: 0.0027\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 - Train Loss: 0.0026 | Val Loss: 0.0027\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 4 - Train Loss: 0.0026 | Val Loss: 0.0026\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 5 - Train Loss: 0.0025 | Val Loss: 0.0027\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 6 - Train Loss: 0.0025 | Val Loss: 0.0027\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 7 - Train Loss: 0.0025 | Val Loss: 0.0026\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 8 - Train Loss: 0.0025 | Val Loss: 0.0026\n--> No improvement, patience counter: 4/5\n","output_type":"stream"},{"name":"stderr","text":"                                                               \r","output_type":"stream"},{"name":"stdout","text":"Epoch 9 - Train Loss: 0.0025 | Val Loss: 0.0025\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 10 - Train Loss: 0.0024 | Val Loss: 0.0025\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 11 - Train Loss: 0.0024 | Val Loss: 0.0026\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 12 - Train Loss: 0.0024 | Val Loss: 0.0025\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 13 - Train Loss: 0.0024 | Val Loss: 0.0025\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 14 - Train Loss: 0.0024 | Val Loss: 0.0024\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 15 - Train Loss: 0.0024 | Val Loss: 0.0025\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 16 - Train Loss: 0.0024 | Val Loss: 0.0025\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 17 - Train Loss: 0.0023 | Val Loss: 0.0025\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 18 - Train Loss: 0.0023 | Val Loss: 0.0024\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 19 - Train Loss: 0.0023 | Val Loss: 0.0024\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 20 - Train Loss: 0.0023 | Val Loss: 0.0027\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 21 - Train Loss: 0.0023 | Val Loss: 0.0024\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 22 - Train Loss: 0.0023 | Val Loss: 0.0023\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 23 - Train Loss: 0.0022 | Val Loss: 0.0024\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 24 - Train Loss: 0.0022 | Val Loss: 0.0023\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 25 - Train Loss: 0.0022 | Val Loss: 0.0024\n--> No improvement, patience counter: 3/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 26 - Train Loss: 0.0022 | Val Loss: 0.0024\n--> No improvement, patience counter: 4/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 27 - Train Loss: 0.0022 | Val Loss: 0.0023\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 28 - Train Loss: 0.0022 | Val Loss: 0.0023\n--> No improvement, patience counter: 1/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 29 - Train Loss: 0.0022 | Val Loss: 0.0024\n--> No improvement, patience counter: 2/5\n","output_type":"stream"},{"name":"stderr","text":"                                                                \r","output_type":"stream"},{"name":"stdout","text":"Epoch 30 - Train Loss: 0.0022 | Val Loss: 0.0023\nBest Validation Loss: 0.0023\nBest model saved as 'best_model.pth'\nFinal Test NRMSE: 0.0416 | Final Test SSIM: 0.8019\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":17},{"cell_type":"markdown","source":"### Final Model: MyModel + SEBlock\nThis model introduces a simple squeeze-and-excitation (SE) mechanism to the bottleneck of the original architecture to enhance channel-wise feature representation without significant increase in complexity.\n\n#### Hyperparameters:\n- mid_dim = 32\n- learning rate = 1e-3\n- batch size = 4\n- early stopping patience = 5\n- total epochs = 30\n\n#### Final Results:\n- Best Validation Loss: **0.0023**\n- Final Test NRMSE: **0.0416**\n- Final Test SSIM: **0.8019**\n\n#### Conclusion:\nWith the help of SEBlock, the model achieves improved structural similarity (SSIM) performance compared to the baseline, demonstrating better spatial consistency in congestion prediction.\n","metadata":{}},{"cell_type":"markdown","source":"Therefore, that will be the end of the project, whil we are having an exploration throughout the model, and some parameters tuning to gain the best result. Eventhough the improvement is a little, but still an improvement is an improvement, no matter how little it is.","metadata":{}}]}